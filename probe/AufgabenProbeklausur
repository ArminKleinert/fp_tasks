1. Betrachten Sie folgende Funktionsdefinitionen:

f :: (Num a) => a -> a
f n = let  a = 2*n
           b = a + ( let  a = 1
                          b = 1
                      in  a+b )
         in  b*a

iterate :: (a -> a) -> a -> [a]
iterate f a = a : iterate f (f a)

Reduzieren Sie folgende Haskell-Ausdrücke schrittweise zur Normalform. Schreiben sie mindestens drei Reduktionsscchritte.
a) f 1
(kein b vorhanden)
c) take 5 (iterate (^2) 1)
d) (filter ((<2) . (mod 5)) . map (^2)) [2,1,4,1]

2. Definieren Sie eine polymorphe Funktion subList, die eine Liste und zwei natürliche Zahlen n, m als Argument bekommt und die Teilliste der Länge m beginnend bei Position n berechnet:
  Anwendungsbeispiel: subList "Beispiel" 2 5 => "ispie"

3. Definieren Sie eine rekursive, polymorphe Funktion applyUntil, die als Argumente eine Funktion f (f :: a -> b), eine Prädikat-Funktion p (p :: a -> Bool) und eine Liste bekommt und, solange die Elemente der Liste das Prädikat nicht erfüllen, die Funktion f auf die Elemente der Liste anwendet und in Ergebnisliste einfügt.
  Anwendungsbeispiel: applyUntil (^2) (>6) [1,5,5,7,1,5] => [1, 25, 25]

4. Betrachten Sie folgende rekursive Funktion, die die maximale Anzahl der Teilflächen berechnet, die entstehen können, wenn ein Kreis mit n geraden Linien geteilt wird.

  maxSurfaces :: Int -> Int
  maxSurfaces 0 -> 1
  maxSurfaces n = maxSurfaces (n-1) + n

a) Definieren Sie eine Funktion, die, mit Hilfe einer endrekursiven Funktion, genau die gleiche Berechnung realisiert.
b) Welche Vorteile hat die endrekursive Runktion gegenüber der nicht endrekursiven Lösung?

5. Die freq-Funktion berechnet, wie oft ein angegebenes Element in einer Liste vorkommt.
  Anwendungsbeispiel: freq 3 [2,1,4,8,9,3,3,0] => 2
                      freq 'a' "abccea abda" => 4
Schreiben Sie eine Definition der freq-Funktion.

6. Schreiben Sie eine NICHT currifizierte Version der map-Funktion.

7. Definieren Sie eine Funktion sumPowerTwo, die die Summe der Quadrate aller Zahlen zwischen 1 und n unter Verwendung der foldl und map Funktionen berechnet. Sie dürfen in ihrer Definition keine Listengeneratoren verwenden.
  Anwendungsbeispiel: sumPowerTwo 7 => 140

8. 
Der Selectionsort Algorithmus sucht das kleinste/größte Element in der zu sortierenden Liste, platziert dieses am Anfang der Liste und wiederholt das Verfahren mit dem Rest der Liste.
a) Definieren Sie eine polymorphe Funktion, die unter Verwendung des Selectionsort Algorithmus die Elemente einer gegebenen Liste sortiert. Ein zweites Argument, das eine Vergleichsoperation sein soll, entscheidet, ob die Liste in absteigender oder ansteigender Reihenfolge sortiert wird. Verwenden Sie in ihrer Definition eine lokale Hilfsfunktion calculateFirst, die je nach angegebener Vergleichsoperation das kleinste oder größte Element der Liste findet und eine zweite lokale Funktion deleteElem, die das gefundene Element aus der Restliste entfernt.

  Anwendungsbeispiel: selectSort (<) [2,1,5,0,4,3] => [0,1,2,3,4,5]
                      selectSort (>) [2,1,5,0,4,3] => [5,4,3,2,1,0]

b) Analysieren Sie die Laufzeitkomplexität ihrer Funktion.

9. In der Bildverarbeitung werden für die Darstellung von Farben unterschiedliche Formate verwendet.

Es gibt z.B. das RGB-Format, in dem mit Hilfe von drei ganzen Zahlen zwischen 0 und 255 (Rot, Grün und Blau-Werte) die Farben kodiert werden.

Im Zeitschriften und Büchern wird das CMYK-Format verwendet, in dem Bilder aus einer Kombination der Farben Cyan, Magenta, Yellow und Black (CMYK) gedruckt werden.

Definieren Sie einen algebraischen Datentyp Color indem Sie Farben in verschiedenen Formaten darstellen, und definieren Sie damit die rgb2cmyk Funktion, die unter Verwendung folgender Formel und nach Eingabe der RGB-Werte die entsprechenden CMYK-Werte berechnet.

Wenn RGB = (0,0,0), dann ist CMYK = (0,0,0,1),
sonst werden die Werte nach folgenden Formeln berechnet:

w =  max(R/255,G/255,B/255)
C = (w−(R/255))/w
M = (w−(G/255))/w
Y = (w−(B/255))/w
K = 1−w


